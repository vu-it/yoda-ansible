---
# copyright Utrecht University

- name: Check if iRODS 4.1.11 is installed
  stat:
    path: /var/lib/irods/iRODS/irodsctl
  register: irods_old


- name: Check if iRODS 4.2 is installed
  stat:
    path: /var/lib/irods/irodsctl
  register: irods_new


- name: Check if iRODS delayed rule queue is empty
  become_user: '{{ irods_service_account }}'
  become: yes
  shell: 'iqstat -a | wc -l'
  register: wc
  until: wc.stdout == "1"
  retries: 5
  delay: 60
  check_mode: no
  when: irods_old.stat.islnk is defined and irods_new.stat.islnk is not defined


- name: Stop iRODS server before upgrade
  become_user: '{{ irods_service_account }}'
  become: yes
  command: '/var/lib/irods/iRODS/irodsctl stop'
  when: irods_old.stat.islnk is defined and irods_new.stat.islnk is not defined


- name: Stop cron service before iRODS upgrade
  service:
    name: crond
    state: stopped
  when: irods_old.stat.islnk is defined and irods_new.stat.islnk is not defined


- name: Ensure iRODS iCAT server and database plugin are present
  package:
    name: '{{ item }}'
    state: present
  with_items:
    - irods-server-4.2.2-1
    - irods-database-plugin-postgres-4.2.2-1
  when: not ansible_check_mode


- name: Generate zone key
  command: 'openssl rand -hex 16'
  register: zone_key
  args:
    creates: /etc/irods/setup_irods


- name: Generate negotiation key
  command: 'openssl rand -hex 16'
  register: negotiation_key
  args:
    creates: /etc/irods/setup_irods


- name: Generate control plane key
  command: 'openssl rand -hex 16'
  register: server_control_plane_key
  args:
    creates: /etc/irods/setup_irods


- name: Generate password salt
  command: 'openssl rand -hex 16'
  register: password_salt
  args:
    creates: /etc/irods/setup_irods


- name: Store iCAT keys in variables
  set_fact:
    '{{ item.fact }}': '{{ item.key }}'
  with_items:
    - fact: irods_zone_key
      key: '{{ zone_key.stdout }}'
    - fact: irods_negotiation_key
      key: '{{ negotiation_key.stdout }}'
    - fact: irods_control_plane_key
      key: '{{ server_control_plane_key.stdout }}'
    - fact: irods_password_salt
      key: '{{ password_salt.stdout }}'
  when: not ansible_check_mode


- name: Copy responses for setup_irods.sh
  template:
    src: setup_irods.j2
    dest: /etc/irods/setup_irods
    force: no
  when: not ansible_check_mode


- name: Configure iRODS iCAT server
  become: yes
  shell: python /var/lib/irods/scripts/setup_irods.py
    < /etc/irods/setup_irods
  args:
    creates: /etc/irods/service_account.config
  run_once: true
  when: not ansible_check_mode


- name: Ensure iRODS iCAT host is a FQDN for iRODS 4.1.11
  become_user: '{{ irods_service_account }}'
  become: yes
  irods_config:
    path: '/etc/irods/server_config.json'
    key: 'icat_host'
    value: '{{ irods_icat_fqdn }}'


- name: Ensure iRODS host is defined
  become_user: '{{ irods_service_account }}'
  become: yes
  irods_config:
    path: '/var/lib/irods/.irods/irods_environment.json'
    key: 'irods_host'
    value: '{{ irods_icat_fqdn }}'


- name: Ensure iRODS server is up
  become_user: '{{ irods_service_account }}'
  become: yes
  shell: 'ils /{{ irods_zone }}/home'
  register: ils
  ignore_errors: true
  changed_when: ils is failed


- name: Start iRODS server
  become_user: '{{ irods_service_account }}'
  become: yes
  command: '/var/lib/irods/irodsctl start'
  when: ils is failed


- name: Wait until iRODS server is ready to receive requests
  become_user: '{{ irods_service_account }}'
  become: yes
  shell: 'ils /{{ irods_zone }}/home'
  register: ils
  until: ils is succeeded
  retries: 5
  delay: 10
  when: ils is failed


- name: Start cron service after iRODS upgrade
  service:
    name: crond
    state: started
  when: irods_old.stat.islnk is defined and irods_new.stat.islnk is not defined


- name: Ensure all users have iRODS read access on /zone/home
  become_user: '{{ irods_service_account }}'
  become: yes
  shell: 'ils -A /{{ irods_zone }}/home | grep "g:public#"'
  register: read_access
  ignore_errors: true
  changed_when: read_access is failed


- name: Provide iRODS read access for all users on /zone/home
  become_user: '{{ irods_service_account }}'
  become: yes
  command: 'ichmod -M read public /{{ irods_zone }}/home'
  when: read_access is failed


- name: Enable ports for iCAT in firewall
  firewalld:
    port: '{{ item }}'
    permanent: true
    state: enabled
    immediate: yes
  with_items:
    - '{{ irods_icat_port }}/tcp'
    - '{{ irods_port_range_begin }}-{{ irods_port_range_end }}/tcp'
  notify: Restart firewall


- name: Ensure private key file is available for iRODS
  command: 'cp {{ openssl_private_dir }}/{{ openssl_key_signed }} {{ openssl_key_signed }}'
  args:
    chdir: '/etc/irods'
    creates: '{{ openssl_key_signed }}'


- name: Ensure CA chain with signed certificate is present
  command: 'cp {{ openssl_certs_dir }}/{{ openssl_crt_signed_and_chain }} {{ openssl_crt_signed_and_chain }}'
  args:
    chdir: '/etc/irods'
    creates: '{{ openssl_crt_signed_and_chain }}'


- name: Ensure Diffie-Hellman parameters are available for iRODS
  command: 'cp {{ openssl_private_dir }}/{{ openssl_dhparams }} {{ openssl_dhparams }}'
  args:
    chdir: '/etc/irods'
    creates: '{{ openssl_dhparams }}'


- name: Ensure iRODS has access to PKI files
  file:
    path: '{{ item }}'
    mode: 0600
    group: '{{ irods_service_account }}'
    owner: '{{ irods_service_account }}'
    state: file
  with_items:
    - '/etc/irods/{{ openssl_key_signed }}'
    - '/etc/irods/{{ openssl_dhparams }}'
    - '/etc/irods/{{ openssl_crt_signed_and_chain }}'
  when: not ansible_check_mode


- name: Ensure iRODS is configured to use SSL
  become_user: '{{ irods_service_account }}'
  become: yes
  irods_config:
    path: '/var/lib/irods/.irods/irods_environment.json'
    key: '{{ item.key }}'
    value: '{{ item.value }}'
  with_items:
    - key: 'irods_ssl_certificate_chain_file'
      value: '/etc/irods/{{ openssl_crt_signed_and_chain }}'
    - key: 'irods_ssl_certificate_key_file'
      value: '/etc/irods/{{ openssl_key_signed }}'
    - key: 'irods_ssl_dh_params_file'
      value: '/etc/irods/{{ openssl_dhparams }}'
    - key: 'irods_client_server_policy'
      value: 'CS_NEG_REQUIRE'
    - key: 'irods_ssl_verify_server'
      value: 'none'


- name: Retrieve iRODS server zone key
  become_user: '{{ irods_service_account }}'
  become: yes
  command: "grep -oP '(?<=\"zone_key\": \")[^\"]*' /etc/irods/server_config.json"
  register: zone_key
  changed_when: false


- name: Retrieve iRODS server negotiation key
  become_user: '{{ irods_service_account }}'
  become: yes
  command: "grep -oP '(?<=\"negotiation_key\": \")[^\"]*' /etc/irods/server_config.json"
  register: negotiation_key
  changed_when: false


- name: Retrieve iRODS server control plane key
  become_user: '{{ irods_service_account }}'
  become: yes
  command: "grep -oP '(?<=\"server_control_plane_key\": \")[^\"]*' /etc/irods/server_config.json"
  register: server_control_plane_key
  changed_when: false


- name: Ensure iRODS is configured to use SSL connection to database
  ini_file:
    path: /var/lib/irods/.odbc.ini
    section: postgres
    option: 'sslmode'
    value: 'require'
    mode: 0600


- name: Ensure iRODS .ssh directory has strict permissions
  file:
    path: /var/lib/irods/.ssh
    state: directory
    mode: 0700
    owner: '{{irods_service_account }}'
    group: '{{irods_service_account }}'


- name: Install private upload key
  become_user: '{{ irods_service_account }}'
  become: yes
  copy:
    content: '{{ upload_priv_key | b64decode }}'
    dest: '/var/lib/irods/.ssh/id_ed25519'
    owner: '{{ irods_service_account }}'
    mode: 0600
  when: upload_priv_key is defined


- name: Scan public host pub key
  become_user: '{{ irods_service_account }}'
  become: yes
  shell: "ssh-keyscan {{ yoda_public_host }} >> ~/.ssh/known_hosts"
  args:
    creates: '/var/lib/irods/.ssh/known_hosts'
  when: upload_priv_key is defined


- name: Ensure Yoda anonymous user exists
  become_user: '{{ irods_service_account }}'
  become: yes
  irods_mkuser:
    name: anonymous


- name: Ensure anonymous user has iRODS read access on /zone/home
  become_user: '{{ irods_service_account }}'
  become: yes
  shell: 'ils -A /{{ irods_zone }}/home | grep "anonymous#"'
  register: read_access
  ignore_errors: true
  changed_when: read_access is failed


- name: Provide iRODS read access for anonymous user on /zone/home
  become_user: '{{ irods_service_account }}'
  become: yes
  command: 'ichmod -M read anonymous /{{ irods_zone }}/home'
  when: read_access is failed


- include_tasks: setup_pam_radius.yml
  when: irods_authentication_scheme == "PAM"
