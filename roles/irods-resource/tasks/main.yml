---
# copyright Utrecht University

- name: Check if iRODS 4.1.11 is installed
  stat:
    path: /var/lib/irods/iRODS/irodsctl
  register: irods_old


- name: Check if iRODS 4.2 is installed
  stat:
    path: /var/lib/irods/irodsctl
  register: irods_new


- name: Stop iRODS server before upgrade
  become_user: '{{ irods_service_account }}'
  become: yes
  command: '/var/lib/irods/iRODS/irodsctl stop'
  when: irods_old.stat.islnk is defined and irods_new.stat.islnk is not defined


- name: Ensure iRODS resource server is installed
  package:
    name: '{{ item }}'
    state: present
  with_items:
    - irods-server-4.2.2-1
  when: not ansible_check_mode


- name: Ensure iRODS server is up
  become_user: '{{ irods_service_account }}'
  become: yes
  shell: 'ils /{{ irods_zone }}/home'
  register: ils
  ignore_errors: true
  changed_when: ils is failed


- name: Start iRODS server
  become_user: '{{ irods_service_account }}'
  become: yes
  command: '/var/lib/irods/irodsctl start'
  when: ils is failed


- name: Wait until iRODS server is ready to receive requests
  become_user: '{{ irods_service_account }}'
  become: yes
  shell: 'ils /{{ irods_zone }}/home'
  register: ils
  until: ils is succeeded
  retries: 5
  delay: 10
  when: ils is failed


- name: Create iRODS service account group
  group:
    name: '{{ irods_service_account }}'
    state: present


- name: Create iRODS service account user
  user:
    name: '{{ irods_service_account }}'
    group: '{{ irods_service_account }}'
    comment: 'iRODS Administrator'
    home: /var/lib/irods
    shell: /bin/bash
    password: '!locked!'
    update_password: on_create
    state: present


- name: Make iRODS service account owner of iRODS directories
  file:
    group: '{{ irods_service_account }}'
    owner: '{{ irods_service_account }}'
    recurse: yes
    path: '{{ item }}'
  with_items:
  - /var/lib/irods
  - /etc/irods


- name: Enable ports for resource in firewall
  firewalld:
    port: '{{ item }}'
    permanent: true
    state: enabled
    immediate: yes
  with_items:
    - '{{ irods_icat_port }}/tcp'
    - '{{ irods_port_range_begin }}-{{ irods_port_range_end }}/tcp'
  notify: Restart firewall


- name: Retrieve iRODS iCAT server
  set_fact:
    'irods_icat': '{{ item }}'
  with_inventory_hostnames:
    - 'icats:&{{ instance }}'


- name: Store iRODS server keys in variables
  set_fact:
    '{{ item.fact }}': '{{ item.key }}'
  with_items:
    - fact: irods_zone_key
      key: "{{ hostvars[irods_icat]['zone_key']['stdout'] }}"
    - fact: irods_negotiation_key
      key: "{{ hostvars[irods_icat]['negotiation_key']['stdout'] }}"
    - fact: irods_control_plane_key
      key: "{{ hostvars[irods_icat]['server_control_plane_key']['stdout'] }}"
  when: not ansible_check_mode


- name: Copy responses for setup_irods.sh
  template:
    src: setup_irods.j2
    dest: /etc/irods/setup_irods
    force: no
  when: not ansible_check_mode


- name: Configure iRODS resource server
  shell: /var/lib/irods/packaging/setup_irods.sh
    < /etc/irods/setup_irods
  args:
    creates: /etc/irods/service_account.config
  run_once: true
  when: not ansible_check_mode


- name: Ensure private key file is available for iRODS
  command: 'cp {{ openssl_private_dir }}/{{ openssl_key_signed }} {{ openssl_key_signed }}'
  args:
    chdir: '/etc/irods'
    creates: '{{ openssl_key_signed }}'


- name: Ensure CA chain with signed certificate is present
  command: 'cp {{ openssl_certs_dir }}/{{ openssl_crt_signed_and_chain }} {{ openssl_crt_signed_and_chain }}'
  args:
    chdir: '/etc/irods'
    creates: '{{ openssl_crt_signed_and_chain }}'


- name: Ensure Diffie-Hellman parameters are available for iRODS
  command: 'cp {{ openssl_private_dir }}/{{ openssl_dhparams }} {{ openssl_dhparams }}'
  args:
    chdir: '/etc/irods'
    creates: '{{ openssl_dhparams }}'


- name: Ensure iRODS has access to PKI files
  file:
    path: '{{ item }}'
    mode: 0600
    group: '{{ irods_service_account }}'
    owner: '{{ irods_service_account }}'
    state: file
  with_items:
    - '/etc/irods/{{ openssl_key_signed }}'
    - '/etc/irods/{{ openssl_dhparams }}'
    - '/etc/irods/{{ openssl_crt_signed_and_chain }}'


- name: Ensure iRODS is configured to use SSL
  become_user: '{{ irods_service_account }}'
  become: yes
  irods_config:
    path: '/var/lib/irods/.irods/irods_environment.json'
    key: '{{ item.key }}'
    value: '{{ item.value }}'
  with_items:
    - key: 'irods_ssl_certificate_chain_file'
      value: '/etc/irods/{{ openssl_crt_signed_and_chain }}'
    - key: 'irods_ssl_certificate_key_file'
      value: '/etc/irods/{{ openssl_key_signed }}'
    - key: 'irods_ssl_dh_params_file'
      value: '/etc/irods/{{ openssl_dhparams }}'
    - key: 'irods_client_server_policy'
      value: 'CS_NEG_REQUIRE'
    - key: 'irods_ssl_verify_server'
      value: 'none'


- name: Ensure iRODS server keys are synced
  become_user: '{{ irods_service_account }}'
  become: yes
  irods_config:
    path: '/etc/irods/server_config.json'
    key: '{{ item.key }}'
    value: '{{ item.value }}'
  with_items:
    - key: 'zone_key'
      value: "{{ hostvars[irods_icat]['zone_key']['stdout'] }}"
    - key: 'server_control_plane_key'
      value: "{{ hostvars[irods_icat]['server_control_plane_key']['stdout'] }}"
    - key: 'negotiation_key'
      value: "{{ hostvars[irods_icat]['negotiation_key']['stdout'] }}"
  when: not ansible_check_mode
